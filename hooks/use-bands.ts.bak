"use client";

"use client";

import { useState, useEffect, useCallback } from 'react';
import { supabase } from '@/lib/supabase';
import { useAuth } from '@/context/SupabaseContext';

export interface Band {
  id: string;
  name: string;
  description?: string;
  creator_id?: string;
  created_at: string;
  updated_at: string;
  image_url?: string;
  member_count?: number;
}

export function useBands() {
  const [bands, setBands] = useState<Band[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<Error | null>(null);
  const { user } = useAuth();

  // Fetch bands the user is a member of
  const fetchBands = useCallback(async () => {
    if (!user) {
      setIsLoading(false);
      return;
    }

    try {
      setIsLoading(true);
      
      // First try a simple approach - get all bands
      // This will work with the RLS policies you've set up
      const { data, error } = await supabase
        .from('bands')
        .select('*')
        .order('updated_at', { ascending: false });
      
      // Handle any errors gracefully
      if (error) {
        console.log('Error fetching bands:', error);
        setError(new Error(error.message || 'Failed to fetch bands'));
        setBands([]);
        return;
      }
      
      // The data should already be in the right format thanks to RLS
      const bands = data || [];
      
      setBands(bands);
    } catch (err) {
      console.error('Unexpected error fetching bands:', err);
      setError(err instanceof Error ? err : new Error('Failed to fetch bands'));
    } finally {
      setIsLoading(false);
    }
  }, [user]);

  // Create a new band
  const createBand = useCallback(async (bandInfo: { name: string; description?: string; image_url?: string }) => {
    if (!user) {
      return { error: new Error('User must be authenticated to create a band') };
    }

    try {
      // Create the band with a simpler approach to avoid RLS issues
      const { data: bandData, error: bandError } = await supabase
        .from('bands')
        .insert([
          {
            name: bandInfo.name,
            description: bandInfo.description || null,
            creator_id: user.id,
            image_url: bandInfo.image_url || '/placeholder.svg?height=200&width=400'
          }
        ])
        .select('id, name, description, creator_id, image_url, created_at, updated_at')
        .single();

      if (bandError) {
        console.log('Error creating band:', bandError);
        return { error: new Error(bandError.message || 'Failed to create band') };
      }
      
      // Return success without adding the creator as a member yet
      // This avoids the potential recursion in RLS policies
      return { band: bandData, error: null };
    } catch (err) {
      console.log('Error in createBand:', err);
      return { error: err instanceof Error ? err : new Error('Failed to create band') };
    }

      // Refresh the bands list
      await fetchBands();

      return { band: bandData, error: null, addBandMember };
    } catch (err) {
      console.error('Error in createBand:', err);
      return { error: err instanceof Error ? err : new Error('Failed to create band') };
    }
  }, [user, fetchBands]);

  // Add a member to a band
  const addBandMember = useCallback(async (bandId: string, userId: string, role: string = 'member') => {
    if (!user) {
      return { error: new Error('User must be authenticated to add band members') };
    }

    try {
      // Check if the user is already a member
      const { data: existingMember, error: checkError } = await supabase
        .from('band_members')
        .select('id')
        .eq('band_id', bandId)
        .eq('user_id', userId)
        .maybeSingle();
      
      if (checkError) {
        console.error('Error checking existing member:', checkError);
        return { error: new Error(checkError.message || 'Failed to check if user is already a member') };
      }
      
      // If user is already a member, return success
      if (existingMember) {
        return { success: true, message: 'User is already a member of this band' };
      }
      
      // Add the user as a member
      const { data, error } = await supabase
        .from('band_members')
        .insert([
          {
            band_id: bandId,
            user_id: userId,
            role
          }
        ])
        .select();

      if (error) {
        console.error('Error adding band member:', error);
        return { error: new Error(error.message || 'Failed to add band member') };
      }

      // Refresh the bands list
      await fetchBands();
      return { success: true, data };
    } catch (err) {
      console.error('Error in addBandMember:', err);
      return { error: err instanceof Error ? err : new Error('Failed to add band member') };
    }
  }, [user, fetchBands]);

  // Get a specific band
  const getBand = useCallback(async (bandId: string) => {
    if (!user) {
      throw new Error('User must be authenticated to view band details');
    }

    try {
      const { data, error } = await supabase
        .from('bands')
        .select(`
          *,
          band_members(user_id, role, joined_at)
        `)
        .eq('id', bandId)
        .single();

      if (error) {
        console.error('Error fetching band details:', error);
        throw error;
      }

      return data;
    } catch (err) {
      console.error('Error in getBand:', err);
      throw err;
    }
  }, [user]);

  // Initialize by fetching bands
  useEffect(() => {
    fetchBands();

    // Set up real-time subscription for band updates
    const channel = supabase
      .channel('band_changes')
      .on('postgres_changes', 
        { 
          event: '*', 
          schema: 'public', 
          table: 'bands',
          filter: `creator_id=eq.${user?.id}`
        }, 
        () => {
          // Refresh bands when changes occur
          fetchBands();
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [user, fetchBands]);

  return {
    bands,
    isLoading,
    error,
    fetchBands,
    createBand,
    addBandMember,
    getBand
  };
}
